//Library Define
#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include <WiFiClientSecure.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <UniversalTelegramBot.h>
//end

//New Variable User Define
#define WIFI_SSID "Adam@AP"
#define WIFI_PASSWORD "kindaprivate2345"
#define BOT_TOKEN "1682014843:AAFyuSOZU9c5VrZhMa3UyV8udemK4fXpjmo"
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "damtzy"
#define AIO_KEY         "aio_hynI702rJsUU2p40FtcnipTThaCX"
#define MAX_Array 30
#define MAX_USER 5
//End

//Declaration Variable & Setup
const int R1 = D1, R2 = D3, LED = D8;
bool state_on = HIGH, state_off = LOW, command;
static int count = 1,counter,counter1,counterAll,status_led,value=0,stat=0;
String info_led,regTime,data[MAX_Array],userArray[MAX_USER];
String weekDays[7]={"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String months[12]={"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
//end of self variable
WiFiClient client;
WiFiClientSecure secured_client;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
X509List cert(TELEGRAM_CERTIFICATE_ROOT);
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
Adafruit_MQTT_Subscribe lightHome = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/test");
const unsigned long BOT_MTBS = 1000; // mean time between scan messages
unsigned long bot_lasttime; // last time messages' scan has been done
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
//end

//Function Declaration

//String checkUser(String usr){
//   for (i=0;i<5;i++){
//      if(userArray[i] == usr){
//        break;
//      }
//}

void userTelebot(String usr){
  int i = 0;
  if (userArray == NULL){
    userArray[i] = usr;
  }
  else {
    for (i=0;i<5;i++){
      if(userArray[i] == usr){
        break;
      }
      else(
        for(i=0;i<5;i++){
          if(userArray[i] == NULL]){
            userArray[i] = usr;
          }
          else{
            continue;
          }
        }
      }
    }
}

void broadcastToUser(int cnt, int cnt, String stat){
 
}

void setupCurrentTime(){
  timeClient.begin();
  timeClient.setTimeOffset(25200);
}

String showCurrentTime(){
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime();
  String formattedTime = timeClient.getFormattedTime();
  String weekDay = weekDays[timeClient.getDay()];
  //Get a time structure
  struct tm *ptm = gmtime ((time_t *)&epochTime); 
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon+1;
  String currentMonthName = months[currentMonth-1];
  int currentYear = ptm->tm_year+1900;
  String a=(weekDay + ", " + monthDay + " " + currentMonthName + " " + formattedTime + " " + currentYear);
  return a;
}

void pinModeSetup(){
  pinMode(R1, OUTPUT);
  pinMode(R2, OUTPUT);
  pinMode(LED, OUTPUT);
}

void relayAllLedOn(){
  digitalWrite(R1, !(state_on));
  digitalWrite(R2, !(state_on));
}

void relayAllLedOff(){
  digitalWrite(R1, !(state_off));
  digitalWrite(R2, !(state_off));
}

void MQTT_connect() {
  int8_t ret;
  if (mqtt.connected()) {
    return;
  }
  Serial.print("Connecting to MQTT... ");
  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}

void turnOn_Bot(String x, int cnt, int cnt1, String kode){
  if(kode == "1"){
    digitalWrite(R1, !(state_on));
    if (counterAll == 2){
      counter-=1;
    }
    if (cnt > 1){
      bot.sendMessage(x, "Light 1 Already ON");
      counter-=1;
    }
    else{
      bot.sendMessage(x, "Light 1 Has Been Turn ON");
    }      
  }
  if(kode == "2"){
    digitalWrite(R2, !(state_on));
    if (counterAll == 2){
      counter1-=1;
    }
    if (cnt > 1){
      bot.sendMessage(x, "Light 2 Already ON");
      counter1-=1;
    }
    else{
      bot.sendMessage(x, "Light 2 Has Been Turn ON");
    }      
  }
  if (kode == "ALL"){
    if(cnt != cnt1){
      counter=1;
      counter1=1;
      cnt=counter;
      cnt1=counter1;
    }
    counterAll= cnt + cnt1;
    relayAllLedOn();
    if (counterAll > 2){
      bot.sendMessage(x, "ALL Light Already ON");
      counter-=1;
      counter1-=1;
    }
    else{
      bot.sendMessage(x, "ALL Light Has Been Turn ON");
    }
  }
}

void turnOff_Bot(String x, int cnt, int cnt1, String kode){
  if (kode == "1"){
    digitalWrite(R1, !(state_off));
    if (cnt == -1 && counterAll == 2){
      cnt+=1;
    }
    if (cnt < 0){
      bot.sendMessage(x, "Light 1 Already OFF");
      counter+=1;
    }
    else{
      bot.sendMessage(x, "Light 1 Has Been Turn OFF");
    }  
  }
  if (kode == "2"){
    digitalWrite(R2, !(state_off));
    if (cnt == -1 && counterAll == 2){
      cnt+=1;
    }
    if (cnt < 0){
      bot.sendMessage(x, "Light 2 Already OFF");
      counter1+=1;
    }
    else{
      bot.sendMessage(x, "Light 2 Has Been Turn OFF");
    }  
  }
  if (kode == "ALL"){
    if(cnt != cnt1){
      counter=0;
      counter1=0;
      cnt=counter;
      cnt1=counter1;
    }
    counterAll= cnt + cnt1;
    relayAllLedOff();
    if (counterAll < -1){
      bot.sendMessage(x, "ALL Light Already OFF");
      counter+=1;
      counter1+=1;
    }
    else{
      bot.sendMessage(x, "ALL Light Has Been Turn OFF");
    }
  }
}

void dataLog(String currentTimex, String info_led, int state_led){
  String a;
  stat = 1;
  if (state_led == 1){
    a = (currentTimex + " Light " + info_led + " ON");
  }
  else if (state_led == 1 && info_led == "ALL"){
    a = (currentTimex + " Light " + info_led + " ON");
  }
  else if (state_led == 0 && info_led == "ALL"){
    a = (currentTimex + " Light " + info_led + " OFF");
  }
  else{
    a = (currentTimex + " Light " + info_led + " OFF");
  }
  
  if(value == MAX_Array ){
    for (int i = 0;i < value; i++){
      if(i==value-1){
        data[i]=a;
      }
      else{
        data[i]=data[i+1];
      }
    }
  }
  else{
    data[value]=a;
    value++;
  }
}

void viDataLog(String x){
 String getData;
 if(stat != 0){
  getData = "";
  for (int i=0;i < value;i++){
    getData += (data[i] + "\n");
  }
  bot.sendMessage(x, getData);
 }
 else{
  bot.sendMessage(x, "Data Log still Empty :(");
 }
}
  
void handleNewMessages(int numNewMessages){
  Serial.println("handleNewMessages");
  Serial.println(numNewMessages);
  for (int i = 0; i < numNewMessages; i++)
  {
    regTime=showCurrentTime();
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;
    command = 0;

//    userTelebot();
    
    if (from_name == ""){
      from_name = "Guest";
      command = 1;
    }

    if (text == "/datalog")
    {
      bot.sendChatAction(chat_id, "grabbing some data...");
      viDataLog(chat_id);
      command = 1;
    }
    
    if (text == "/start")
    {
       String welcome = "Hai, " + from_name + " My name is Alexa, nice to meet you <3 !.\n";
       welcome += "Here it is, the command is down below for " + from_name + " guide to Alexa!.\n";
       welcome += "Alexa Commands:\n";
       welcome += "1.Turn on light (1 or 2) = for turn on the led 1/2.\n";
       welcome += "2.Turn off light (1 or 2) = for turn off the led 1/2.\n";
       welcome += "3.Turn on all led = for turn on all led.\n";
       welcome += "4.Turn off all led = for turn off all led.\n";
       welcome += "5./datalog = to view all the data history when the led ON/OFF.\n";
       welcome += "SO, LETS GET STARTED WITH ALEXA!";
       bot.sendMessage(chat_id, welcome);
       command = 1;
    }
    
    if (text == "Turn on all light"){
      bot.sendChatAction(chat_id, "Turning on all light...");
      info_led="ALL";
      status_led=1;
      counter += 1;
      counter1 += 1;
      turnOn_Bot(chat_id, counter,counter1, info_led);
      dataLog(regTime, info_led, status_led);
      command = 1;
    }

    if (text == "Turn off all light"){
      bot.sendChatAction(chat_id, "Turning off all light...");
      info_led="ALL";
      status_led=0;
      counter-=1;
      counter1-=1;
      turnOff_Bot(chat_id, counter,counter1, info_led);
      dataLog(regTime, info_led, status_led);
      command = 1;
    }
    
    if (text == "Turn on light 1"){
      bot.sendChatAction(chat_id, "Turning on light 1...");
      info_led = "1";
      status_led = 1;
      counter+=1;
      dataLog(regTime, info_led, status_led);
      turnOn_Bot(chat_id, counter,0, info_led);
      command = 1;
    }

    if (text == "Turn on light 2"){
      bot.sendChatAction(chat_id, "Turning on light 2...");
      info_led = "2";
      status_led = 1;
      counter1+=1;
      turnOn_Bot(chat_id, counter1,0, info_led);
      dataLog(regTime, info_led, status_led);
      command = 1;
    }
        
    if (text == "Turn off light 1"){
      bot.sendChatAction(chat_id, "Turning off light 1...");
      info_led = "1";
      status_led = 0;
      counter-=1;
      turnOff_Bot(chat_id, counter,0, info_led);
      dataLog(regTime, info_led, status_led);
      command = 1;
    }

    if (text == "Turn off light 2"){
      bot.sendChatAction(chat_id, "Turning off light 2...");
      info_led = "2";
      status_led = 0;
      counter1-=1;
      turnOff_Bot(chat_id, counter1,0, info_led);
      dataLog(regTime, info_led, status_led);
      command = 1;
    }
    
    if (command != 1) {
      String sorry = "Sorry " + from_name + " your command doesn't exist:(\n";
      sorry += "Try again with the list of the command below:\n";
      sorry += "1.Turn on light (1 or 2) = for turn on the led 1/2.\n";
      sorry += "2.Turn off light (1 or 2) = for turn off the led 1/2.\n";
      sorry += "3.Turn on all light = for turn on all led.\n";
      sorry += "4.Turn off all light = for turn off all led.\n";
      sorry += "5./datalog = to view all the data history when the led ON/OFF.";
      bot.sendChatAction(chat_id, "Typing...");
      bot.sendMessage(chat_id, sorry);
    }
    
    if (true){
      String keyboard = "[[\"Turn on all light\", \"Turn off all light\"],[\"Turn on light 1\",\"Turn off light 1\"],[\"Turn on light 2\", \"Turn off light 2\"],[\"/datalog\"]]";
      if (text ==  "/start" || command != 1){
        bot.sendMessageWithReplyKeyboard(chat_id, "Choose Alexa Commands:", "", keyboard, true);  
      }
      else {
        bot.sendMessageWithReplyKeyboard(chat_id, "", "", keyboard, true);  
      }  
    }
  }  
}
//end

//Setup Board
void setup(){
  Serial.begin(115200);
  Serial.println();
  pinModeSetup();
  relayAllLedOff();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); 
  secured_client.setTrustAnchors(&cert); // Add root certificate for api.telegram.org
  Serial.print("\nConnecting...");
  while (WiFi.status() != WL_CONNECTED)
  {
    digitalWrite(LED, HIGH);
    delay(1000);
    digitalWrite(LED, LOW);
    delay(1000);
    Serial.print(".");
    delay(1000);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
  Serial.print("Retrieving time: ");
  configTime(0, 0, "pool.ntp.org"); // get UTC time via NTP
  time_t now = time(nullptr);
  while (now < 24 * 3600)
  {
    Serial.print(".");
    delay(1000);
    now = time(nullptr);
  }
  Serial.println(F("Finish Retrieve Time"));
  setupCurrentTime();
  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&lightHome);
  digitalWrite(LED, HIGH);
  Serial.println(F("All Setup Finish"));
}
//end

uint32_t x = 0;

//Loop
void loop(){
  //Telegram Bot
  if ((millis() - bot_lasttime) > BOT_MTBS)
    {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    bot_lasttime = millis();
  }
  //Google Assistant (AdaFruit)
  MQTT_connect();
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {
    if (subscription == &lightHome) {
      regTime=showCurrentTime();
      Serial.print(F("Got: "));
      Serial.println((char *)lightHome.lastread);
      int Light1_State = atoi((char *)lightHome.lastread);      
      if(Light1_State != NULL){
        if(Light1_State != 2){
          digitalWrite(R1, !(Light1_State));
          digitalWrite(R2, !(Light1_State));
        }
        else {
          digitalWrite(R1, HIGH);
        }
      }
      if(Light1_State == 0){
        counter-=1;
        counter1-=1;
//        turnOff_Bot("1139051246", counter,counter1, "ALL");
        dataLog(regTime, "ALL", 0);
      }
      if(Light1_State == 1){
        counter+=1;
        counter1+=1;
//        turnOn_Bot("1139051246", counter,counter1, "ALL");
        dataLog(regTime, "ALL", 1);
      }
      if(Light1_State == 2){
        counter-=1;
//        turnOff_Bot("1139051246", counter,0, "1");
        dataLog(regTime, "1", 0);
      }
    }
  }
   if (!mqtt.ping()){
    mqtt.disconnect();
  }
}
//end
